type Tokens = record {e8s: nat64;};
type TimeStamp = record {timestamp_nanos: nat64;};
type Result__1 = 
 variant {
   Err: text;
   Ok;
 };
type Result_2 = 
 variant {
   Err: text;
   Ok: nat32;
 };
type Result_1 = 
 variant {
   Err: text;
   Ok: vec record {
             float64;
             text;
           };
 };
type Result = 
 variant {
   err: text;
   ok: text;
 };
type Nexai = 
 service {
   CheckPrincipal: () -> (principal) query;
   Check_Principal: (principal) -> (principal);
   VDBAddQandA: (nat32, FloatMatrix, vec text) -> (Result__1);
   VDBBuildIndex: (nat32) -> (Result__1);
   VDBGetSimilar: (nat32, FloatVector, int32) -> (Result_1);
   VDBRegister: (text) -> (Result_2);
   check_for_premium: () -> (opt bool) query;
   createCompany: (text, text, text, nat32) -> (opt CompanyEntry);
   createQCard: (text, text, FloatMatrix, vec text) -> (Result);
   deleteQCard: (nat) -> ();
   editCompanyDetails: (text, text, text) -> (opt CompanyEntry);
   editQCard: (nat, text, text) -> ();
   getAllCompanies: () -> (vec record {
                                 principal;
                                 CompanyEntry__1;
                               }) query;
   getAllConnections: () -> (opt vec ConnectionEntry) query;
   getAllQCards: (nat32) -> (opt vec CardEntry) query;
   getAnAnswer: (nat) -> (opt CardEntry);
   getCompanyProfile: () -> (opt CompanyEntry) query;
   getMessage: (nat) -> (opt MessageEntry);
   getMessages: (principal) -> (vec MessageEntry) query;
   getMyAccountIdentifier: () -> (text) query;
   getVDB_ID: (nat) -> (nat32);
   greet: (text) -> (text);
   icp_balance: () -> (nat);
   icp_balance_dfx: () -> (Tokens);
   logIn: () -> (bool) query;
   makeManager: () -> (bool);
   sendMessage: (principal, text) -> (opt null);
   set_premium: (bool) -> (bool);
   toAccount: (record {
                 caller: principal;
                 canister: principal;
               }) -> (Account);
   toSubaccount: (principal) -> (blob);
   transferICP: (text, Tokens, TimeStamp) -> (nat64);
 };
type MessageEntry = 
 record {
   body: text;
   connectionId: nat;
   createdAt: int;
   id: nat;
   sender: principal;
 };
type FloatVector = vec float64;
type FloatMatrix = vec FloatVector;
type ConnectionEntry = 
 record {
   account1: principal;
   account2: principal;
   createdAt: int;
   id: nat;
 };
type CompanyEntry__1 = 
 record {
   createdAt: int;
   description: text;
   documentId: opt int;
   email: text;
   name: text;
   premium: opt bool;
   vdbId: nat32;
 };
type CompanyEntry = 
 record {
   createdAt: int;
   description: text;
   documentId: opt int;
   email: text;
   name: text;
   premium: opt bool;
   vdbId: nat32;
 };
type CardEntry = 
 record {
   answer: text;
   question: text;
   vdbId: nat32;
 };
type Account = 
 record {
   owner: principal;
   subaccount: opt blob;
 };
service : () -> Nexai
