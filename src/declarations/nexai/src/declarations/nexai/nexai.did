type Result__1 = 
 variant {
   Err: text;
   Ok;
 };
type Result_2 = 
 variant {
   Err: text;
   Ok: nat32;
 };
type Result_1 = 
 variant {
   Err: text;
   Ok: vec record {
             float64;
             text;
           };
 };
type Result = 
 variant {
   err: text;
   ok: text;
 };
type Nexai = 
 service {
   CheckPrincipal: () -> (principal) query;
   VDBAddQandA: (nat32, FloatMatrix, vec text) -> (Result__1);
   VDBBuildIndex: (nat32) -> (Result__1);
   VDBGetSimilar: (nat32, FloatVector, int32) -> (Result_1);
   VDBRegister: (text) -> (Result_2);
   createCompany: (text, text, text, nat32) -> (opt CompanyEntry);
   createQCard: (text, text, FloatMatrix, vec text) -> (Result);
   deleteQCard: (nat) -> ();
   editCompanyDetails: (text, text, text) -> (opt CompanyEntry);
   editQCard: (nat, text, text) -> ();
   getAllCompanies: () -> (vec record {
                                 principal;
                                 CompanyEntry__1;
                               }) query;
   getAllQCards: (nat32) -> (opt vec CardEntry) query;
   getAnAnswer: (nat) -> (opt CardEntry);
   getCompanyProfile: () -> (opt CompanyEntry) query;
   getMessage: (text) -> (opt Conversation);
   getVDB_ID: (nat) -> (nat32);
   greet: (text) -> (text);
   logIn: () -> (bool) query;
   makeManager: () -> (bool);
   sendMessage: (principal, text, opt text) -> () oneway;
 };
type Message = 
 record {
   body: text;
   company: principal;
   customer: principal;
   id: nat;
   time: int;
 };
type FloatVector = vec float64;
type FloatMatrix = vec FloatVector;
type Conversation = 
 record {
   conversationID: opt text;
   messages: vec Message;
 };
type CompanyEntry__1 = 
 record {
   createdAt: int;
   description: text;
   email: text;
   name: text;
   vdbId: nat32;
 };
type CompanyEntry = 
 record {
   createdAt: int;
   description: text;
   email: text;
   name: text;
   vdbId: nat32;
 };
type CardEntry = 
 record {
   answer: text;
   question: text;
   vdbId: nat32;
 };
service : () -> Nexai
